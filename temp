REGEX_CONNECT = re.compile(
    r"\["
    r"(\d{4}\.\d{2}\.\d{2}-\d{2}\.\d{2}\.\d{2}:\d{3})"  # Группа 1: timestamp
    r"\]\["
    r"(\d+)"  # Группа 2: thread ID
    r"\]"
    r"LogSquad: PostLogin: NewPlayer: "
    r"([\w_]+)"  # Группа 3: player name
    r" "
    r"([^\s]+)"  # Группа 4: unknown field
    r" \(IP: (\d{1,3}(?:\.\d{1,3}){3})"  # Группа 5: IP
    r" \| Online IDs: EOS: ([a-f0-9]+)"  # Группа 6: EOS ID
    r" steam: (\d+)\)"  # Группа 7: SteamID
)

# Обновленный REGEX_VEHICLE
REGEX_VEHICLE = re.compile(
    r"\["
    r"(\d{4}\.\d{2}\.\d{2}-\d{2}\.\d{2}\.\d{2}:\d{3})"  # Группа 1: timestamp
    r"\]\["
    r"\d+"  # Пропускаем thread ID
    r"\]"
    r"LogSquadTrace: \[DedicatedServer\]ASQPlayerController::OnPossess\(\): PC=([^\s]+)"  # Группа 2: player name
    r" \(.*steam: (\d+)\).*Pawn=(BP_[A-Za-z0-9_]+)"  # Группа 3: SteamID, Группа 4: vehicle type
)

async def process_log_line(line, server):
    server_name = server["name"]
    
    try:
        if not line.strip():
            return

        # Обработка подключения игрока
        if match := REGEX_CONNECT.search(line):
            steam_id = match.group(7)
            eos_id = match.group(6)
            player_name = match.group(3)  # Правильная группа для имени
            
            success = await add_player_to_match(server, steam_id, eos_id, player_name)
            if success:
                logging.info(f"[{server_name}] Игрок подключен: {player_name} ({steam_id})")
            else:
                logging.warning(f"[{server_name}] Ошибка добавления игрока: {player_name}")
            return

        # Обработка взятия техники
        if match := REGEX_VEHICLE.search(line):
            timestamp = match.group(1)
            player_name = match.group(2)  # Группа 2 - player name
            steam_id = match.group(3)
            vehicle_type = match.group(4)
            
            vehicle_name = vehicle_mapping.get(vehicle_type, "Неизвестная техника")
            await send_vehicle_message(server, player_name, steam_id, vehicle_name)
            return

        # Остальная обработка...

    except Exception as e:
        logging.error(f"[{server_name}] Ошибка обработки строки: {str(e)}")
        logging.debug(f"Проблемная строка: {line}")  # Добавляем логирование проблемной строки

# Добавляем проверки в функцию отправки
async def send_vehicle_message(server, player_name, steam_id, vehicle_name):
    try:
        if not player_name:
            player_name = "Неизвестный игрок"
            
        if not steam_id.isdigit():
            logging.error(f"Некорректный SteamID: {steam_id}")
            return

        # Остальная часть функции без изменений...
